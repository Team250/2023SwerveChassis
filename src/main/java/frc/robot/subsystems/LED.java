// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import java.util.Random;
import java.util.Random.*;
import java.util.concurrent.TimeUnit;
import edu.wpi.first.math.geometry.Rotation2d;
import frc.robot.NavX;
import java.lang.Math;

import edu.wpi.first.wpilibj.AddressableLED;
import edu.wpi.first.wpilibj.AddressableLEDBuffer;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.util.Color;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class LED extends SubsystemBase {
    private final NavX m_gyro = new NavX();
    private AddressableLED ledController;
    private AddressableLEDBuffer ledBuffer;
    private boolean m_LedState = false;
    public int pattern = 0;
    private int movingLED = 0;
    private boolean movingDirection = true;
    private int m_rainbowFirstPixelHue = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    // public LED() {
    public LED(int id, int length) {
        ledController = new AddressableLED(id);
        ledBuffer = new AddressableLEDBuffer(length);

        ledController.setLength(ledBuffer.getLength());
        ledController.setData(ledBuffer);
        ledController.start();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void setColor(int r, int g, int b) {
        for (var i = 0; i < ledBuffer.getLength(); i++) {
            ledBuffer.setRGB(i, r, g, b);
        }
        ledController.setData(ledBuffer);
    }

    public void setColor(Color color) {
        for (var i = 0; i < ledBuffer.getLength(); i++) {
            ledBuffer.setLED(i, color);
        }
        ledController.setData(ledBuffer);
    }

    public void movingColor(Color color) {
        for (var i = 0; i < ledBuffer.getLength(); i++) {
            if (i == movingLED) {
                ledBuffer.setLED(i, color);
            } else {
                ledBuffer.setLED(i, Color.kBlack);
            }
        }
        if (movingDirection) {
            movingLED += 1;
        } else {
            movingLED -= 1;
        }
        if (movingLED >= ledBuffer.getLength() - 1 || movingLED <= 0) {
            movingDirection = !movingDirection;
        }
        ledController.setData(ledBuffer);
    }

    public void rainbow() {
        // For every pixel
        for (var i = 0; i < ledBuffer.getLength(); i++) {
            // Calculate the hue - hue is easier for rainbows because the color
            // shape is a circle so only one value needs to precess
            final var hue = (m_rainbowFirstPixelHue + (i * 180 / ledBuffer.getLength())) % 180;
            // Set the value
            ledBuffer.setHSV(i, hue, 255, 128);
        }
        // Increase by to make the rainbow "move"
        m_rainbowFirstPixelHue += 3;
        // Check bounds
        m_rainbowFirstPixelHue %= 180;
        ledController.setData(ledBuffer);
    }

    public double getHeading() {
        return Rotation2d.fromDegrees(m_gyro.getYaw()).getDegrees();
    }

    public void gyroColor(double gyroAngle) {
        double angle = 0;
        double angle2 = 0;
        if (gyroAngle < 0){
            angle = 360 + gyroAngle;
            angle2 = angle-180;
        }else{
            angle = gyroAngle;
            angle2 = angle + 180;
        }
        for (var i = 0; i< ledBuffer.getLength();i++) {
            double iAngle = i*(360/ledBuffer.getLength());
            if (iAngle > angle -50 && iAngle < angle +50){
                ledBuffer.setRGB(i, 255, 0, 0);
            }else if (iAngle > angle2 -50 && iAngle < angle2 +50){
                ledBuffer.setRGB(i, 0, 255, 0);
            }else{
                ledBuffer.setRGB(i, 255, 255, 255);
            }
        }
        ledController.setData(ledBuffer);
    }

    public void teamColors() {
        int alternate = 0;
        int offset = 0;
        for (var i = 0; i < ledBuffer.getLength(); i++) {
            if (((i+offset) % 2)==0){
            ledBuffer.setRGB(i,0,0,0);    
            }
            else if(alternate == 0){
                ledBuffer.setRGB(i, 0, 0, 255);
                alternate++;
            }
            else{
                ledBuffer.setRGB(i, 255, 255, 0);
                alternate--;
            }
        ledController.setData(ledBuffer);
        }
        try {
            TimeUnit.MILLISECONDS.sleep(200);
        } catch (InterruptedException e) {

        }
    }

    public boolean getState(){
        return m_LedState;
    }

    public void switchState(boolean LEDState){
        m_LedState = LEDState;
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

